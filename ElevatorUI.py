# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Elevator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from dispatch import Controller

WALL_NUMS=6 # 墙数
ELEV_NUMS=5 # 电梯数
LEVEL_NUMS=20 #楼层数

OPEN_DOOR=0 # 开门
CLOSE_DOOR=1 # 关门
DOOR_OPENED=1 # 门在开着
DOOR_CLOSED=0 # 门在关着

# 乘客选择状态
GO_UP=0
GO_DOWN=1

# 警报状态
USABLE=1 # 电梯可用
DISABLE=0 # 电梯损坏

class Ui_Window(object):
    def __init__(self):
        # 绑定控制器
        self._ctrl = Controller(5, self)

        self.walls=[] # 墙

        self.inLevelButtons=[] # 放置电梯内部的楼层按钮

        self.openButtons=[] # 每个电梯内部开门按钮
        self.closeButtons=[] # 每个电梯内部关门按钮

        self.levelCmdButtons=[] # 放置每层楼外部上下行按钮
        self.levelCmdLabels=[] # 放置楼层标签

        self.warnButtons=[] # 放置电梯内部警报按钮

        self.screenUPLabels=[] # 电梯显示屏上行标签
        self.screenDWLabels=[] # 电梯显示屏下行标签
        self.screenLevelLabels=[] # 电梯显示屏楼层标签

        self.doors=[] # 门背景
        self.fonts=[] # 门面
        self.doorAnims=[] #门动画


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1652, 1020)
        MainWindow.setStyleSheet("background-color:rgb(255, 255, 255)")


        # region 绘制每层楼上下行标签
        xpos=[100,120,160]
        for i in range(LEVEL_NUMS//2):
            # 楼层标签
            l=QtWidgets.QLabel(MainWindow)
            l.setGeometry(QtCore.QRect(xpos[0]+150*i, 30, 40, 40))
            l.setObjectName("LEVEL_{}".format(i))
            self.levelCmdLabels.append(l)

            # 上下行按钮
            up=QtWidgets.QPushButton(MainWindow)
            up.setGeometry(QtCore.QRect(xpos[1]+150*i, 30, 40, 40))
            up.setObjectName("LEVELUP_{}".format(i))
            up.setStyleSheet("border-image:url(resources/btn/up_btn_normal.png)")
            up.clicked.connect(self.cmdClick)
            self.levelCmdButtons.append(up)

            dw = QtWidgets.QPushButton(MainWindow)
            dw.setGeometry(QtCore.QRect(xpos[2] + 150 * i, 30, 40, 40))
            dw.setObjectName("LEVELDOWN_{}".format(i))
            dw.setStyleSheet("border-image:url(resources/btn/down_btn_normal.png)")
            dw.clicked.connect(self.cmdClick)
            self.levelCmdButtons.append(dw)
        for i in range(LEVEL_NUMS//2,LEVEL_NUMS):
            # 楼层标签
            l = QtWidgets.QLabel(MainWindow)
            l.setGeometry(QtCore.QRect(xpos[0] + 150 * (i-LEVEL_NUMS//2), 90, 40, 40))
            l.setObjectName("LEVEL_{}".format(i))
            self.levelCmdLabels.append(l)

            # 上下行按钮
            up = QtWidgets.QPushButton(MainWindow)
            up.setGeometry(QtCore.QRect(xpos[1] + 150 * (i-LEVEL_NUMS//2), 90, 40, 40))
            up.setObjectName("LEVELUP_{}".format(i))
            up.setStyleSheet("border-image:url(resources/btn/up_btn_normal.png)")
            up.clicked.connect(self.cmdClick)
            self.levelCmdButtons.append(up)

            dw = QtWidgets.QPushButton(MainWindow)
            dw.setGeometry(QtCore.QRect(xpos[2] + 150*(i-LEVEL_NUMS//2), 90, 40, 40))
            dw.setObjectName("LEVELDOWN_{}".format(i))
            dw.setStyleSheet("border-image:url(resources/btn/down_btn_normal.png)")
            dw.clicked.connect(self.cmdClick)
            self.levelCmdButtons.append(dw)

        self.levelCmdButtons[1].setEnabled(False) # 1楼下行禁用
        self.levelCmdButtons[2*19].setEnabled(False) #20楼上行禁用
        # endregion


        # 绘制墙
        walls_pos=[40,340,640,940,1240,1540]
        for i in range(WALL_NUMS):
            self.walls.append(QtWidgets.QGraphicsView(MainWindow))
            self.walls[i].setGeometry(QtCore.QRect(walls_pos[i], 180, 10, 761))
            self.walls[i].setStyleSheet("background-color:rgb(10, 10, 10)")
            self.walls[i].setObjectName("WALL_{}".format(i))

        # 电梯文字模型
        font = QtGui.QFont()
        font.setFamily("AcadEref")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # 绘制每个电梯内部楼层按钮
        xpos=[260,560,860,1160,1460]
        for i in range(ELEV_NUMS):
            bs=[]
            for j in range(LEVEL_NUMS//2):
                b=QtWidgets.QPushButton(MainWindow)
                b.setGeometry(QtCore.QRect(xpos[i], 330+40*j, 30, 30))
                b.setObjectName("LEVEL_{}_{}".format(i,j))
                b.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(226, 226, 226);border-radius: 15px;border:0.5px solid #000000;")
                b.clicked.connect(MainWindow.levelClick) # 绑定内调度函数
                bs.append(b)
            for j in range(LEVEL_NUMS//2,LEVEL_NUMS):
                b = QtWidgets.QPushButton(MainWindow)
                b.setGeometry(QtCore.QRect(xpos[i]+40, 330 + 40 * (j-LEVEL_NUMS//2), 30, 30))
                b.setObjectName("LEVEL_{}_{}".format(i, j))
                b.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(226, 226, 226);border-radius: 15px;border:0.5px solid #000000;")
                b.clicked.connect(MainWindow.levelClick)  # 绑定内调度函数
                bs.append(b)
            self.inLevelButtons.append(bs)


        # 绘制每个电梯内部开关门按钮
        xpos=[260,560,860,1160,1460]
        for i in range(ELEV_NUMS):
            b = QtWidgets.QPushButton(MainWindow)
            b.setGeometry(QtCore.QRect(xpos[i], 780, 30, 30))
            b.setObjectName("OPEN_{}".format(i))
            b.clicked.connect(MainWindow.doorsClick)
            b.setStyleSheet("QPushButton{border-image: url(resources/btn/open_n.png)}"
                "QPushButton:hover{border-image: url(resources/btn/open_hover.png)}"
                "QPushButton:pressed{border-image: url(resources/btn/open_pressed.png)}")
            self.openButtons.append(b)


            b = QtWidgets.QPushButton(MainWindow)
            b.setGeometry(QtCore.QRect(xpos[i]+40, 780, 30, 30))
            b.setObjectName("CLOSE_{}".format(i))
            b.clicked.connect(MainWindow.doorsClick) # 绑定门控制函数
            b.setStyleSheet("QPushButton{border-image: url(resources/btn/close_n.png)}"
                            "QPushButton:hover{border-image: url(resources/btn/close_hover.png)}"
                            "QPushButton:pressed{border-image: url(resources/btn/close_pressed.png)}")
            self.closeButtons.append(b)


        # 绘制每个电梯每部报警按钮
        xpos=[280,580,880,1180,1480]
        for i in range(ELEV_NUMS):
            wbutton = QtWidgets.QPushButton(MainWindow)
            wbutton.setGeometry(QtCore.QRect(xpos[i], 840, 31, 31))
            wbutton.setObjectName("WARN_{}".format(i))
            wbutton.setStyleSheet("border-image:url(resources/warn/warn.png)")
            wbutton.clicked.connect(MainWindow.warnClick)
            self.warnButtons.append(wbutton)

        # 绘制每个电梯显示屏信息标签
        xpos=[65,365,665,965,1265]
        for i in range(ELEV_NUMS):
            label=QtWidgets.QLabel(MainWindow)
            label.setGeometry(QtCore.QRect(xpos[i], 640, 41, 51))
            label.setObjectName("S_UP_{}".format(i))
            label.setStyleSheet("border-image:url(resources/screen/up_2.png)")
            self.screenUPLabels.append(label)

            lcd = QtWidgets.QLCDNumber(MainWindow)
            lcd.setGeometry(QtCore.QRect(xpos[i]+45, 640, 41, 51))
            lcd.setDigitCount(2)
            lcd.setProperty("value", 1.0)  # 设置初始楼层为1层
            lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
            lcd.setObjectName("S_LEVEL_{}".format(i))
            self.screenLevelLabels.append(lcd)

            label = QtWidgets.QLabel(MainWindow)
            label.setGeometry(QtCore.QRect(xpos[i]+90, 640, 41, 51))
            label.setObjectName("S_DOWN_{}".format(i))
            label.setStyleSheet("border-image:url(resources/screen/down_2.png)")
            self.screenDWLabels.append(label)

        # 绘制每个门的背景和门面,动画
        xpos=[80,380,680,980,1280]
        for i in range(ELEV_NUMS):
            door=QtWidgets.QGraphicsView(MainWindow)
            door.setGeometry(QtCore.QRect(xpos[i], 710, 100, 161))
            door.setStyleSheet("background-color: rgb(6, 132, 200)")
            door.setObjectName("DOOR_{}".format(i))
            self.doors.append(door)

            font_1 = QtWidgets.QGraphicsView(MainWindow)
            font_1.setGeometry(QtCore.QRect(xpos[i], 710, 50, 161))
            font_1.setStyleSheet("background-color:rgb(200, 200, 191)")
            self.fonts.append(font_1)
            self.doorAnims.append(QtCore.QPropertyAnimation(self.fonts[2*i], b"geometry"))
            self.doorAnims[2 * i].setDuration(1000)  # 设定动画时间
            self.doorAnims[2 * i].setStartValue(QtCore.QRect(xpos[i], 710, 50, 161))  # 设置起始大小
            self.doorAnims[2 * i].setEndValue(QtCore.QRect(xpos[i], 710, 8, 161))  # 设置终止大小

            font_2 = QtWidgets.QGraphicsView(MainWindow)
            font_2.setGeometry(QtCore.QRect(xpos[i]+50, 710, 50, 161))
            font_2.setStyleSheet("background-color:rgb(200, 200, 191)")
            self.fonts.append(font_2)
            self.doorAnims.append(QtCore.QPropertyAnimation(self.fonts[2 * i+1], b"geometry"))
            self.doorAnims[2 * i+1].setDuration(1000)  # 设定动画时间
            self.doorAnims[2 * i+1].setStartValue(QtCore.QRect(xpos[i]+50, 710, 50, 161))  # 设置起始大小
            self.doorAnims[2 * i+1].setEndValue(QtCore.QRect(xpos[i]+50+42, 710, 8, 161))  # 设置终止大小

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        # 设置电梯内部楼层按钮标号
        for i in range(ELEV_NUMS):
            for j in range(LEVEL_NUMS):
                self.inLevelButtons[i][j].setText(_translate("MainWindow", str(j+1)))

        # 设置楼层标签
        for i in range(LEVEL_NUMS):
            self.levelCmdLabels[i].setText(_translate("MainWindow", str(i+1)))


    # 门按钮按下
    def doorsClick(self):
        objectName = self.sender().objectName()
        elev = int(objectName[-1])
        cmd = OPEN_DOOR if objectName[0] == 'O' else CLOSE_DOOR  # 0 => 开门    1 => 关门
        print("{0}号电梯, 命令是{1}".format(elev, cmd))

        self._ctrl.doorsCtrl(elev, cmd)  # 调用控制器进行doorCtrl处理

    # 上下行按下 LEVELUP_{} LEVELDOWN_{}
    def cmdClick(self):
        objectName = self.sender().objectName()
        print(objectName)
        cmd=GO_UP if objectName.split('_')[0]=="LEVELUP" else GO_DOWN
        level=int(objectName.split('_')[1])

        # for debug
        print("{}楼层发出{}命令".format(level,cmd))

        # 楼层按钮亮起来
        if cmd==GO_UP:
            self.levelCmdButtons[2*level].setStyleSheet("border-image:url(resources/btn/up_btn_pressed.png)")
        else:
            self.levelCmdButtons[2*level+1].setStyleSheet("border-image:url(resources/btn/down_btn_pressed.png)")

        self._ctrl.externDis(level, cmd)

    # 报警按钮点击
    def warnClick(self):
        objectName=self.sender().objectName()
        elev=objectName[-1]
        self._ctrl.warnsCtrl(int(elev))

    # 内调度函数 LEVEL_{}_{}
    def levelClick(self):
        whichBbutton=self.sender()
        objectName = self.sender().objectName()
        x=objectName.split('_')
        elev,target=x[1], x[2]

        print("电梯{}内部点击{}".format(elev,target))
        whichBbutton.setEnabled(False) # 设置该按钮无法点击
        whichBbutton.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(255, 170, 0);border-radius: 15px;border:0.5px solid #000000;")
        self._ctrl.internDis(int(elev),int(target))


